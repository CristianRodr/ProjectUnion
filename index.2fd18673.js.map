{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-cf7d0b9e852a9dd9.js","node_modules/@parcel/runtime-js/lib/runtime-3e561cdd7e195e7b.js","src/day.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"fOhVW\\\":\\\"index.2fd18673.js\\\",\\\"8srZq\\\":\\\"Icons.496e9310.svg\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8srZq\")).toString();","import icons from './images/Icons.svg';\n\nconst form = document.querySelector('.header__form');\nconst labelDate = document.querySelector('.clock');\nconst labelDay = document.querySelector('.square-day');\nconst labelAbreDay = document.querySelector('.abbreviation-day');\nconst labelMonth = document.querySelector('.month');\nconst region = document.querySelector('.square-country');\nconst temperatura = document.querySelector('.square-degrees');\nconst min = document.querySelector('.min');\nconst max = document.querySelector('.max');\nconst amanecer = document.querySelector('.dawn');\nconst atardecer = document.querySelector('.sunset');\nconst icon = document.querySelector('.clima-icon');\nconst legenda = document.querySelector(\".legend\")\n\nconst LOCALSTORAGE_KEY = \"clima-message\";\n\n//Toma del Input\nconst tomaCiudadInput = function () {\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const {\n      elements: { ciudad },\n    } = event.target;\n\n    console.log(ciudad.value);\n    busquedaClima(ciudad.value);\n    localStorage.setItem(LOCALSTORAGE_KEY, ciudad.value);\n    //console.log(localStorage.getItem(LOCALSTORAGE_KEY));\n    event.currentTarget.reset();\n    clearInterval(timerVariable);\n\n    ///////////////////////////////////////\n\n    //const serializedState = JSON.stringify(value);\n\n  });\n};\n\ntomaCiudadInput();\n\n//Uso de la API de international\n//Forma sencilla de formatear fechas y horas\n/*const localInterval = setInterval(function () {\n  const now = new Date();\n\n  const optionClock = {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hour12: false,\n  };\n\n  labelDate.innerText = new Intl.DateTimeFormat(\"local\", optionClock).format(\n    now\n  );\n\n}, 1000);*/\n\nconst localTime = function () {\n  const now = new Date();\n\n  const optionDay = {\n    day: 'numeric',\n    weekday: 'short',\n  };\n\n  const optionMonth = {\n    month: 'long',\n  };\n\n  labelDay.innerText = new Intl.DateTimeFormat('local', optionDay).format(now);\n\n  labelMonth.textContent = new Intl.DateTimeFormat('local', optionMonth).format(\n    now\n  );\n};\n\nlocalTime();\n\nlet timerVariable;\n\nconst busquedaClima = async function (busqueda) {\n  try {\n    const posClima = await fetch(`\n    https://api.openweathermap.org/data/2.5/weather?q=${busqueda}&appid=c1e47110da4d70de2cafd30f980532f1&units=metric&lang=es`);\n    const dataClima = await posClima.json();\n    console.log(dataClima);\n\n    if (!posClima.ok)\n      throw new Error(`${dataClima.message} (${posClima.status})`);\n\n    const { main, sys, wind, weather } = dataClima;\n    console.log(weather[0]);\n\n    console.log(weather[0].description);\n    legenda.textContent = `El pronostico para ${dataClima.name}, ${sys.country}. el dia de hoy, ${weather[0].description}`\n\n    let icon_Nubes = [weather[0].main];\n    console.log(icon_Nubes);\n\n    if (icon_Nubes.includes('Clouds')) {\n      icon.setAttribute('xlink:href', `${icons}#icon-Nubes`);\n    }\n    if (icon_Nubes.includes('Clear')) {\n      icon.setAttribute('xlink:href', `${icons}#icon-calor`);\n    }\n    if (icon_Nubes.includes('Fog')) {\n      icon.setAttribute('xlink:href', `${icons}#icon-Icono1`);\n    }\n    if (icon_Nubes.includes('Rain')) {\n      icon.setAttribute('xlink:href', `${icons}#icon-Icono1`);\n    }\n    if (icon_Nubes.includes('Snow')) {\n      icon.setAttribute('xlink:href', `${icons}#icon-Icono3`);\n    }\n\n    temperatura.textContent = Math.trunc(main.temp);\n    min.textContent = `${Math.trunc(main.temp_min)}°`;\n    max.textContent = `${Math.trunc(main.temp_max)}°`;\n    region.textContent = `${dataClima.name}, ${sys.country}`;\n    console.log(`${dataClima.name}, ${sys.country}`);\n\n    const output = function (amanecer) {\n      let sunrise = moment.unix(amanecer).utc();\n      return moment(sunrise._i).format('LT');\n    };\n\n    const closet = function (atardecer) {\n      let sunset = moment.unix(atardecer).utc();\n      return moment(sunset._i).format('LT');\n    };\n\n    const sunrise = output(sys.sunrise);\n    const sunset = closet(sys.sunset);\n\n    amanecer.textContent = sunrise;\n    atardecer.textContent = sunset;\n\n    function convertTime(dt, timezone) {\n      let d = new Date(dt * 1000);\n      d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n      d.setSeconds(d.getSeconds() + timezone);\n\n      const date = new Date(d);\n      console.log(date);\n\n      const hra = date.getHours();\n      const min = date.getMinutes();\n      const seg = date.getSeconds();\n\n      let h = 3600;\n      let m = 60;\n      let s = 1;\n\n      const operacion = h * hra + m * min + s * seg;\n      console.log(operacion);\n\n      timerVariable = setInterval(countUpTimer, 1000);\n      let totalSeconds = operacion;\n\n      function countUpTimer() {\n        ++totalSeconds;\n        const hour = String(Math.floor(totalSeconds / 3600)).padStart(2, 0);\n        const minute = String(\n          Math.floor((totalSeconds - hour * 3600) / 60)\n        ).padStart(2, 0);\n        const seconds = String(\n          totalSeconds - (hour * 3600 + minute * 60)\n        ).padStart(2, 0);\n        //console.log(hour + \":\" + minute + \":\" + seconds);\n        labelDate.textContent = hour + ':' + minute + ':' + seconds;\n      }\n\n      const optionDay = {\n        day: 'numeric',\n        weekday: 'short',\n      };\n\n      const optionMonth = {\n        month: 'long',\n      };\n\n      labelDay.textContent = new Intl.DateTimeFormat('local', optionDay).format(\n        date\n      );\n\n      labelMonth.textContent = new Intl.DateTimeFormat(\n        'local',\n        optionMonth\n      ).format(date);\n\n      return d;\n    }\n\n    //console.log(convertTime(dataClima.dt, dataClima.timezone));\n    convertTime(dataClima.dt, dataClima.timezone);\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst getPosition = function () {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst whereAmI = function () {\n  getPosition()\n    .then(pos => {\n      const { latitude: lat, longitude: lng } = pos.coords;\n\n      return fetch(\n        `http://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lng}&limit=&appid=c1e47110da4d70de2cafd30f980532f1`\n      );\n    })\n    .then(res => {\n      if (!res.ok) throw new Error(`Problem with geocoding ${res.status}`);\n      return res.json();\n    })\n    .then(data => {\n      console.log(data);\n      console.log(`You are in ${data[0].name}, ${data[0].country}`);\n      const country = data[0].country.toLowerCase();\n      busquedaClima(data[0].name);\n\n      return fetch(`https://restcountries.com/v3.1/name/${country}`);\n    })\n    .then(res => {\n      if (!res.ok) throw new Error(`Country not found (${res.status})`);\n\n      return res.json();\n    })\n    .then(data => {\n      console.log(data[0]);\n    })\n    .catch(err => console.error(`${err.message} 💥`));\n};\n\nwhereAmI();\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\ndocument.addEventListener('DOMContentLoaded', function (ev) {\n  console.log('HTML analizado y dom construido');\n});"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$9da9384a9efb2a2e$exports","URL","resolve","import","meta","url","toString","$a75b094282702316$var$form","document","querySelector","$a75b094282702316$var$labelDate","$a75b094282702316$var$labelDay","$a75b094282702316$var$labelMonth","$a75b094282702316$var$region","$a75b094282702316$var$temperatura","$a75b094282702316$var$min","$a75b094282702316$var$max","$a75b094282702316$var$amanecer","$a75b094282702316$var$atardecer","$a75b094282702316$var$icon","$a75b094282702316$var$legenda","addEventListener","event","preventDefault","elements","ciudad","target","console","log","value","$a75b094282702316$var$busquedaClima","localStorage","setItem","currentTarget","reset","clearInterval","$a75b094282702316$var$timerVariable","now","Date","innerText","Intl","DateTimeFormat","day","weekday","format","textContent","month","$a75b094282702316$var$localTime","async","busqueda","posClima","fetch","dataClima","json","ok","message","status","main","sys","wind","weather","description","name","country","icon_Nubes","includes","setAttribute","$parcel$interopDefault","Math","trunc","temp","temp_min","temp_max","closet","atardecer1","sunset","moment","unix","utc","_i","sunrise1","amanecer1","sunrise","output","sunset1","dt","timezone","d","setMinutes","getMinutes","getTimezoneOffset","setSeconds","getSeconds","date","operacion","getHours","setInterval","totalSeconds","hour","String","floor","padStart","minute","seconds","convertTime","err","alert","Promise","reject","navigator","geolocation","getCurrentPosition","then","pos","latitude","lat","longitude","lng","coords","res","data","toLowerCase","catch","error","ev"],"version":3,"file":"index.2fd18673.js.map"}